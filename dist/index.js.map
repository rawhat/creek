{"version":3,"sources":["asyncStream.ts","stream.ts","index.ts"],"names":[],"mappings":";AAMA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,eAAA,SAAA,GAAA,IAAA,OAAA,cAAA,MAAA,IAAA,UAAA,wCAAA,IAAA,EAAA,EAAA,EAAA,OAAA,eAAA,OAAA,EAAA,EAAA,KAAA,IAAA,EAAA,mBAAA,SAAA,SAAA,GAAA,EAAA,OAAA,YAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,eAAA,WAAA,OAAA,MAAA,GAAA,SAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,OAAA,IAAA,QAAA,SAAA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,SAAA,GAAA,EAAA,CAAA,MAAA,EAAA,KAAA,KAAA,IAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,KAAA,EAAA,YAAA,EAAA,MAAA,KAAA,SAAA,SAAA,GAAA,OAAA,gBAAA,GAAA,KAAA,EAAA,EAAA,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,SAAA,EAAA,EAAA,GAAA,IAAA,OAAA,cAAA,MAAA,IAAA,UAAA,wCAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,eAAA,WAAA,OAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,SAAA,GAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,GAAA,IAAA,iBAAA,EAAA,QAAA,QAAA,EAAA,MAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,MAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EALA,IAAA,EAAA,QAAA,WAKa,EAAA,WAKT,SAAA,EAAA,GACA,IAAA,EAAyB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAE,EAAA,KAAA,GAJrB,KAAA,WAAyB,GAM1B,KAAA,UAAY,EACZ,KAAA,WAAa,EATtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAYS,MAAA,WACE,OAAA,KAAK,cAbhB,CAAA,IAAA,YAkBE,MAAA,SACE,EACA,GAAqE,IAAA,EAAA,KAEjE,EAAc,EAeX,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAhBI,SACpB,GACiC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC7B,GAAe,SAAf,EAAM,KADuB,CAAA,EAAA,KAAA,EAAA,MAExB,OAAA,EAAA,OAAA,SAAA,GAFwB,KAAA,EAIG,OAAlB,EAAA,GAAA,EAJe,EAAA,KAAA,EAIG,EAAM,MAJT,KAAA,EAIrB,OAJqB,EAAA,GAAA,EAAA,KAIgB,EAAA,GAAA,EAJhB,EAAA,KAAA,GAIrB,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAJqB,KAAA,EAK5B,GADC,EAJ2B,EAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAMxB,OAAA,EAAA,OAAA,SAAA,CAAE,KAAM,SANgB,KAAA,GAS1B,OADP,EAAc,EAAI,GACX,EAAA,OAAA,SAAA,CAAE,KAAM,QAAS,MAAO,EAAI,KATF,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WAzBvC,CAAA,IAAA,MA2CE,MAAA,SAAO,GAAgC,IAAA,EAAA,KAS9B,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAVI,SACpB,GACgC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC5B,GAAe,SAAf,EAAM,KADsB,CAAA,EAAA,KAAA,EAAA,MAEvB,OAAA,EAAA,OAAA,SAAA,GAFuB,KAAA,EAIY,OAAb,EAAA,GAAA,EAJC,EAAA,KAAA,EAIY,EAAM,MAJlB,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,SAAA,CAIvB,KAAM,QAAS,MAJQ,EAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA9CtC,CAAA,IAAA,SA0DE,MAAA,SAAO,GAAyC,IAAA,EAAA,KAYvC,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAbI,SACpB,GACgC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC5B,GAAe,SAAf,EAAM,KADsB,CAAA,EAAA,KAAA,EAAA,MAEvB,OAAA,EAAA,OAAA,SAAA,GAFuB,KAAA,EAIJ,OAAhB,EAAA,GAAA,EAJoB,EAAA,KAAA,EAIJ,EAAM,MAJF,KAAA,EAI1B,OAJ0B,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,GAI1B,EAAA,EAAA,IAAA,EAAA,IAJ0B,KAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAKvB,OAAA,EAAA,OAAA,SAAA,CAAE,KAAM,SALe,KAAA,GAOzB,OAAA,EAAA,OAAA,SAAA,GAPyB,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA7DtC,CAAA,IAAA,UA4EE,MAAA,SAAW,GAAgC,IAAA,EAAA,KASlC,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAVF,SACd,GACgC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC5B,GAAe,SAAf,EAAM,KADsB,CAAA,EAAA,KAAA,EAAA,MAEvB,OAAA,EAAA,OAAA,SAAA,GAFuB,KAAA,EAIc,OAAb,EAAA,GAAA,EAJD,EAAA,KAAA,EAIc,EAAM,MAJpB,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,SAAA,CAIvB,KAAM,UAAW,MAJM,EAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA/EtC,CAAA,IAAA,OA2FE,MAAA,SAAK,GAAS,IAAA,EAAA,KACR,EAAQ,EAaL,OAAA,IAAI,EAAY,KAAK,UAAW,KAAK,WAAW,OAZvC,SACd,GACiC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC7B,GAAe,SAAf,EAAM,KADuB,CAAA,EAAA,KAAA,EAAA,MAExB,OAAA,EAAA,OAAA,SAAA,GAFwB,KAAA,EAI7B,GAAA,IAAU,EAJmB,CAAA,EAAA,KAAA,EAAA,MAKxB,OAAA,EAAA,OAAA,SAAA,CAAE,KAAM,SALgB,KAAA,EAQ1B,OADP,IACO,EAAA,OAAA,SAAA,CAAE,KAAM,QAAS,MAAO,EAAM,QARJ,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA/FvC,CAAA,IAAA,YA4GE,MAAA,SAAU,GAAyC,IAAA,EAAA,KAY1C,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAbF,SACd,GACiC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC7B,GAAe,SAAf,EAAM,KADuB,CAAA,EAAA,KAAA,EAAA,MAExB,OAAA,EAAA,OAAA,SAAA,GAFwB,KAAA,EAIP,OAAhB,EAAA,GAAA,EAJuB,EAAA,KAAA,EAIP,EAAM,MAJC,KAAA,EAI7B,OAJ6B,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,GAI7B,EAAA,EAAA,IAAA,EAAA,IAJ6B,KAAA,EAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAKxB,OAAA,EAAA,OAAA,SAAA,CAAE,KAAM,SALgB,KAAA,GAO1B,OAAA,EAAA,OAAA,SAAA,GAP0B,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA/GvC,CAAA,IAAA,OA8HE,MAAA,SAAK,GAAS,IAAA,EAAA,KACR,EAAQ,EAaL,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAdF,SACd,GACiC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC7B,GAAe,SAAf,EAAM,KADuB,CAAA,EAAA,KAAA,EAAA,MAExB,OAAA,EAAA,OAAA,SAAA,GAFwB,KAAA,EAI7B,KAAe,UAAf,EAAM,MAAoB,EAAQ,GAJL,CAAA,EAAA,KAAA,EAAA,MAMxB,OADP,IACO,EAAA,OAAA,SAAA,CAAE,KAAM,SANgB,KAAA,EAQ1B,OAAA,EAAA,OAAA,SAAA,GAR0B,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WAlIvC,CAAA,IAAA,UAkJE,MAAA,WAAO,IAAA,EAAA,KASE,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAVF,SACd,GACgC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC5B,GAAe,SAAf,EAAM,KADsB,CAAA,EAAA,KAAA,EAAA,MAEvB,OAAA,EAAA,OAAA,SAAA,GAFuB,KAAA,EAIzB,OAAA,EAAA,OAAA,SAAA,CAAE,KAAM,UAAW,MAAO,EAAM,QAJP,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WArJtC,CAAA,IAAA,MAiKE,MAAA,SAAI,GAAmC,IAAA,EAAA,KAS9B,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAVF,SACd,GACiC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC7B,GAAe,UAAf,EAAM,KADuB,CAAA,EAAA,KAAA,EAAA,MAElB,OAAb,EAAA,GAAA,EAF+B,EAAA,KAAA,EAElB,EAAM,MAFY,KAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,IAAA,KAAA,EAI1B,OAAA,EAAA,OAAA,SAAA,GAJ0B,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WApKvC,CAAA,IAAA,SAgLE,MAAA,SAAe,GACP,IAAA,EAAO,KACN,OAAA,IAAI,EAA4B,WAlL3C,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,EAmL8B,EAAA,EAAA,GAnL9B,KAAA,EAmLkC,OAnLlC,EAAA,KAAA,EAmLkC,EAAA,EAAA,QAnLlC,KAAA,EAmLkC,IAAA,EAAA,EAAA,MAAA,KAAA,CAnLlC,EAAA,KAAA,GAAA,MAoLQ,OADe,EAAG,EAAA,MAnL1B,EAAA,KAAA,EAoLQ,EAAM,GApLd,KAAA,EAoLQ,OApLR,EAAA,KAAA,GAoLQ,EAAA,KApLR,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,EAAA,KAAA,GAsL8B,EAAA,EAAA,GAtL9B,KAAA,GAsLmC,OAtLnC,EAAA,KAAA,GAsLmC,EAAA,EAAA,QAtLnC,KAAA,GAsLmC,IAAA,EAAA,EAAA,MAAA,KAAA,CAtLnC,EAAA,KAAA,GAAA,MAuLQ,OADe,EAAG,EAAA,MAtL1B,EAAA,KAAA,GAuLQ,EAAM,GAvLd,KAAA,GAuLQ,OAvLR,EAAA,KAAA,GAuLQ,EAAA,KAvLR,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,aAAA,CAAA,IAAA,YA4LE,MAAA,WAAS,IAAA,EAAA,KACH,EAAQ,EASL,OAAA,IAAI,EACT,KAAK,UACL,KAAK,WAAW,OAVI,SACpB,GAC2C,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACvC,GAAe,SAAf,EAAM,KADiC,CAAA,EAAA,KAAA,EAAA,MAElC,OAAA,EAAA,OAAA,SAAA,GAFkC,KAAA,EAIL,OAJK,EAAA,KAAA,EAIL,EAAM,MAJD,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAIQ,EAAA,GAAA,IAJR,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,SAAA,CAIlC,KAAM,QAAS,MAJmB,EAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WAhMjD,CAAA,IAAA,UA6UE,MAAA,WAAW,IAA+B,IAAA,EAAA,KAA/B,EAAA,UAAA,OAAA,EAA+B,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAA/B,EAA+B,GAAA,UAAA,GAClC,IAAA,EACJ,CAAA,KAAK,OAAO,kBACT,OAAA,EAAA,EAAO,IAAI,SAAC,GAAQ,OAAA,EAAI,OAAO,qBAG9B,EAAW,EAAW,IAAI,SAAO,EAAW,GAAS,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACvC,OADuC,EAAA,KAAA,EACvC,EAAU,OAD6B,KAAA,EAElD,OADD,EADmD,EAAA,KAElD,EAAA,OAAA,SAAA,CACL,MAAA,EACA,UAAW,EACX,OAAQ,IAL+C,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QAoBrD,EAA2B,CAC/B,WAAA,EACA,MAAO,EAAS,OACd,SAAC,EAAK,EAAM,GAAU,OAAA,OAAA,OAAA,OAAA,OAAA,GACjB,GACF,EAAA,GAAA,EAAQ,KAEX,KAIG,OAAA,EAAA,YAAY,EAAa,SAAA,GAAS,IAAA,EAAA,EAAA,WAAY,EAAA,EAAA,MAAW,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC1D,GAAsB,IAAtB,EAAW,QAA8C,IAA9B,OAAO,KAAK,GAAO,OADY,CAAA,EAAA,KAAA,EAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,EAK3C,OAL2C,EAAA,KAAA,EAK3C,QAAQ,KAAK,OAAO,OAAO,IALgB,KAAA,EAQ1D,GAHA,EAL0D,EAAA,YAMvD,EAAM,EAAO,QAEhB,EAAO,OAAO,KAR4C,CAAA,EAAA,KAAA,GAAA,MAUxD,GADJ,EAAW,OAAO,EAAO,UAAW,GACV,IAAtB,EAAW,QAA8C,IAA9B,OAAO,KAAK,GAAO,OAVU,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,GAa7C,OAb6C,EAAA,KAAA,GAa7C,QAAQ,KAAK,OAAO,OAAO,IAbkB,KAAA,GAexD,GAFJ,EAb4D,EAAA,YAcrD,EAAM,EAAO,QAChB,EAAO,OAAO,KAf0C,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,GA+BvD,OAXD,EACJ,KAAK,IAAL,MAAA,KAAY,EAAA,OAAO,KAAK,GAAO,IAAI,SAAC,GAAM,OAAA,SAAS,OAAO,EACtD,EAAO,EAAW,EAAO,WAAW,OAAO,KAAK,SAAC,GAC9C,MAAA,CACL,MAAO,EACP,UAAW,EAAO,UAClB,OAAQ,KAGZ,EAAM,GAAa,EAEZ,EAAA,OAAA,SAAA,CAAC,EAAO,OAAO,MAAO,CAAE,WAAA,EAAY,MAAA,KA/BmB,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,UAlXpE,CAAA,IAAA,UAuZQ,MAAA,WAvZR,IAAA,EAAA,EAAA,OAAA,EAAA,UAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAwZQ,EAAe,GAxZvB,EAAA,KAAA,EAyZ6B,EAAA,EAAA,KAAK,aAzZlC,KAAA,EAyZ6C,OAzZ7C,EAAA,KAAA,EAyZ6C,EAAA,OAzZ7C,KAAA,EAyZ6C,IAAA,EAAA,EAAA,MAAA,KAAA,CAzZ7C,EAAA,KAAA,GAAA,MA0Z2B,OADN,EAAI,EAAA,MAzZzB,EAAA,KAAA,GA0Z2B,KAAK,gBAAgB,GA1ZhD,KAAA,GA2ZU,GAAgB,WADd,EAAA,EAAA,MACK,KAAS,CA3Z1B,EAAA,KAAA,GAAA,MA4Z2B,OAAnB,EAAA,GAAA,EA5ZR,EAAA,KAAA,GA4Z2B,EAAO,MA5ZlC,KAAA,GAAA,EAAA,GAAA,EAAA,KA4ZgB,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,EAAA,IA5ZhB,EAAA,KAAA,GAAA,MAAA,KAAA,GA6ZiB,GAAgB,YAAhB,EAAO,KAAS,CA7ZjC,EAAA,KAAA,GAAA,MA8ZY,IAAA,MAAM,QAAQ,EAAO,OAArB,CA9ZZ,EAAA,KAAA,GAAA,MA+ZiC,OAAvB,EAAA,GAAA,EAAQ,KAAR,EAAA,GAAA,EA/ZV,EAAA,GAAA,EAAA,EAAA,KAAA,GA+ZiC,QAAQ,IAAI,EAAO,OA/ZpD,KAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAia6B,OAAnB,EAAA,GAAA,EAjaV,EAAA,KAAA,GAia6B,EAAO,MAjapC,KAAA,GAAA,EAAA,GAAA,EAAA,KAiakB,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,EAAA,IAjalB,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAmaiB,GAAgB,SAAhB,EAAO,KAAS,CAnajC,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,OAAA,QAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,WAAA,IAAA,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAyaW,OAAA,EAAA,OAAA,SAAA,GAzaX,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,WAAA,CAAA,IAAA,OA4aQ,MAAA,SAAQ,EAAY,GA5a5B,IAAA,EAAA,EAAA,OAAA,EAAA,UAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EA6aQ,EAAc,EA7atB,EAAA,KAAA,EA8a6B,EAAA,EAAA,KAAK,aA9alC,KAAA,EA8a6C,OA9a7C,EAAA,KAAA,EA8a6C,EAAA,OA9a7C,KAAA,EA8a6C,IAAA,EAAA,EAAA,MAAA,KAAA,CA9a7C,EAAA,KAAA,GAAA,MA+a2B,OADN,EAAI,EAAA,MA9azB,EAAA,KAAA,GA+a2B,KAAK,gBAAgB,GA/ahD,KAAA,GAgbU,GAAgB,WADd,EAAA,EAAA,MACK,KAAS,CAhb1B,EAAA,KAAA,GAAA,MAib0C,OAAd,EAAA,GAAA,EAjb5B,EAAA,KAAA,GAib0C,EAAO,MAjbjD,KAAA,GAibsB,OAjbtB,EAAA,GAAA,EAAA,KAibwD,EAAA,GAAA,EAjbxD,EAAA,KAAA,IAibsB,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAjbtB,KAAA,GAibQ,EAAA,EAAA,KAjbR,EAAA,KAAA,GAAA,MAAA,KAAA,GAkbiB,GAAgB,YAAhB,EAAO,KAAS,CAlbjC,EAAA,KAAA,GAAA,MAmbY,IAAA,MAAM,QAAQ,EAAO,OAArB,CAnbZ,EAAA,KAAA,GAAA,MAobU,EAAc,EAAO,MAAM,OACzB,SAAC,EAAG,GAAQ,OAAA,EAAQ,EAAG,IACvB,GAtbZ,EAAA,KAAA,GAAA,MAAA,KAAA,GAyb4C,OAAd,EAAA,GAAA,EAzb9B,EAAA,KAAA,GAyb4C,EAAO,MAzbnD,KAAA,GAybwB,OAzbxB,EAAA,GAAA,EAAA,KAyb0D,EAAA,GAAA,EAzb1D,EAAA,KAAA,IAybwB,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAzbxB,KAAA,GAybU,EAAA,EAAA,KAzbV,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GA2biB,GAAgB,SAAhB,EAAO,KAAS,CA3bjC,EAAA,KAAA,GAAA,MA4be,OAAA,EAAA,OAAA,SAAA,GA5bf,KAAA,GAAA,OAAA,EAAA,OAAA,WAAA,IAAA,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAicW,OAAA,EAAA,OAAA,SAAA,GAjcX,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,WAAA,CAAA,IAAA,UAocQ,MAAA,SAAQ,GApchB,IAAA,EAAA,EAAA,OAAA,EAAA,UAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,EAqc6B,EAAA,EAAA,KAAK,aArclC,KAAA,EAqc6C,OArc7C,EAAA,KAAA,EAqc6C,EAAA,OArc7C,KAAA,EAqc6C,IAAA,EAAA,EAAA,MAAA,KAAA,CArc7C,EAAA,KAAA,GAAA,MAsc2B,OADN,EAAI,EAAA,MArczB,EAAA,KAAA,EAsc2B,KAAK,gBAAgB,GAtchD,KAAA,EAucU,GAAgB,UADd,EAAA,EAAA,MACK,KAAS,CAvc1B,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,GA0cU,GAAgB,UAAhB,EAAO,KAAS,CA1c1B,EAAA,KAAA,GAAA,MA2cqB,OAAb,EAAA,GAAA,EA3cR,EAAA,KAAA,GA2cqB,EAAO,MA3c5B,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,IAAA,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,WAAA,CAAA,IAAA,kBAgdgB,MAAA,SAAgB,GAhdhC,OAAA,EAAA,UAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAidQ,EAAM,CAAE,KAAM,QAAS,MAAA,GACH,EAAA,EAAA,KAAK,YAldjC,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAmdU,GADK,EAAA,EAAA,MACQ,SAAb,EAAI,KAAS,CAndvB,EAAA,KAAA,EAAA,MAode,OAAA,EAAA,OAAA,SAAA,GApdf,KAAA,EAsdU,GAAa,SAAb,EAAI,KAAS,CAtdvB,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,OAAA,WAAA,IAAA,KAAA,GAydkB,OAzdlB,EAAA,KAAA,GAydkB,EAAU,GAzd5B,KAAA,GAydM,EAAA,EAAA,KAzdN,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GA2dW,OAAA,EAAA,OAAA,SAAA,GA3dX,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,WAAA,CA8dG,IAAA,OAAO,cAAR,MAAA,WACQ,IAAA,EAAO,KACL,OAAA,WAheZ,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,EAie+B,EAAA,EAAA,EAAK,aAjepC,KAAA,EAie+C,OAje/C,EAAA,KAAA,EAie+C,EAAA,EAAA,QAje/C,KAAA,EAie+C,IAAA,EAAA,EAAA,MAAA,KAAA,CAje/C,EAAA,KAAA,GAAA,MAkeuB,OADA,EAAI,EAAA,MAje3B,EAAA,KAAA,EAkeuB,EAAM,EAAK,gBAAgB,IAlelD,KAAA,EAmeY,GAAgB,UADd,EAAA,EAAA,MACK,KAAS,CAne5B,EAAA,KAAA,GAAA,MAoeU,OApeV,EAAA,KAAA,GAoeU,OAAA,GApeV,KAAA,GAAA,OAAA,EAAA,OAAA,SAAA,EAAA,MAAA,KAAA,GAseY,GAAgB,UAAhB,EAAO,KAAS,CAte5B,EAAA,KAAA,GAAA,MAueU,OAveV,EAAA,KAAA,GAueU,EAAM,EAAO,OAvevB,KAAA,GAueU,OAveV,EAAA,KAAA,GAueU,EAAA,KAveV,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAgeY,OAheZ,EAAa,GAAb,QAAA,YAAA;;ACGA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,eAAA,SAAA,GAAA,IAAA,OAAA,cAAA,MAAA,IAAA,UAAA,wCAAA,IAAA,EAAA,EAAA,EAAA,OAAA,eAAA,OAAA,EAAA,EAAA,KAAA,IAAA,EAAA,mBAAA,SAAA,SAAA,GAAA,EAAA,OAAA,YAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,eAAA,WAAA,OAAA,MAAA,GAAA,SAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,OAAA,IAAA,QAAA,SAAA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,SAAA,GAAA,EAAA,CAAA,MAAA,EAAA,KAAA,KAAA,IAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,KAAA,EAAA,YAAA,EAAA,MAAA,KAAA,SAAA,SAAA,GAAA,OAAA,gBAAA,GAAA,KAAA,EAAA,EAAA,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,SAAA,EAAA,EAAA,GAAA,IAAA,OAAA,cAAA,MAAA,IAAA,UAAA,wCAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,eAAA,WAAA,OAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,SAAA,GAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,GAAA,IAAA,iBAAA,EAAA,QAAA,QAAA,EAAA,MAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,MAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EATA,IAAA,EAAA,QAAA,iBASa,EAAA,WAKT,SAAA,EAAA,GACA,IAAA,EAAyB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAE,EAAA,KAAA,GAJrB,KAAA,WAAyB,GAM1B,KAAA,UAAY,EACZ,KAAA,WAAa,EATtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAcE,MAAA,SACE,EACA,GAEI,IAAA,EAAc,EAYX,OAAA,IAAI,EAAO,KAAK,UAAW,KAAK,WAAW,OAX5B,SAAC,GACjB,GAAe,SAAf,EAAM,KACD,OAAA,EAEH,IAAA,EAAO,EAAY,EAAM,MAAO,GAClC,OAAC,GAGL,EAAc,EAAK,GACZ,CAAE,KAAM,QAAS,MAAO,EAAK,KAH3B,CAAE,KAAM,aAzBvB,CAAA,IAAA,MAiCE,MAAA,SAAO,GAOE,OAAA,IAAI,EAAO,KAAK,UAAW,KAAK,WAAW,OAN5B,SAAC,GACjB,MAAe,SAAf,EAAM,KACD,EAEF,CAAE,KAAM,QAAS,MAAO,EAAO,EAAM,aAtClD,CAAA,IAAA,SA2CE,MAAA,SAAO,GAUE,OAAA,IAAI,EAAO,KAAK,UAAW,KAAK,WAAW,OAT5B,SAAC,GACjB,MAAe,SAAf,EAAM,KACD,EAEJ,EAAU,EAAM,OAGd,EAFE,CAAE,KAAM,aAjDvB,CAAA,IAAA,UAwDE,MAAA,SAAW,GAOF,OAAA,IAAI,EAAa,KAAK,UAAW,KAAK,WAAW,OANxC,SAAC,GACX,MAAe,SAAf,EAAM,KACD,EAEF,CAAE,KAAM,UAAW,MAAO,EAAO,EAAM,aA7DpD,CAAA,IAAA,OAkEE,MAAA,SAAK,GACC,IAAA,EAAQ,EAWL,OAAA,IAAI,EAAO,KAAK,UAAW,KAAK,WAAW,OAVlC,SAAC,GACX,MAAe,SAAf,EAAM,KACD,EAEL,IAAU,EACL,CAAE,KAAM,SAEjB,IACO,CAAE,KAAM,QAAS,MAAO,EAAM,aA5E3C,CAAA,IAAA,YAiFE,MAAA,SAAU,GAUD,OAAA,IAAI,EAAa,KAAK,UAAW,KAAK,WAAW,OATxC,SAAC,GACX,MAAe,SAAf,EAAM,KACD,EAEL,EAAU,EAAM,OACX,CAAE,KAAM,QAEV,OAzFb,CAAA,IAAA,OA8FE,MAAA,SAAK,GACC,IAAA,EAAQ,EAWL,OAAA,IAAI,EAAa,KAAK,UAAW,KAAK,WAAW,OAVxC,SAAC,GACX,MAAe,SAAf,EAAM,KACD,EAEU,UAAf,EAAM,MAAoB,EAAQ,GACpC,IACO,CAAE,KAAM,SAEV,OAxGb,CAAA,IAAA,UA6GE,MAAA,WAOS,OAAA,IAAI,EAAa,KAAK,UAAW,KAAK,WAAW,OANxC,SAAC,GACX,MAAe,SAAf,EAAM,KACD,EAEF,CAAE,KAAM,UAAW,MAAO,EAAM,YAlH7C,CAAA,IAAA,MAuHE,MAAA,SAAI,GAOK,OAAA,IAAI,EAAa,KAAK,UAAW,KAAK,WAAW,OANxC,SAAC,GAIR,MAHY,UAAf,EAAM,MACR,EAAO,EAAM,OAER,OA5Hb,CAAA,IAAA,SAiIE,MAAA,SAAU,GACF,IAAA,EAAO,KACN,OAAA,IAAI,EAAqB,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACZ,EAAA,EAAA,GADY,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,EAAA,MAEtB,OADG,EADmB,EAAA,MAAA,EAAA,KAAA,EAEtB,EAFsB,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAIZ,EAAA,EAAA,GAJY,EAAA,KAAA,GAAA,EAAA,IAAA,KAAA,GAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAKtB,OADG,EAJmB,EAAA,MAAA,EAAA,KAAA,GAKtB,EALsB,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,WAnIpC,CAAA,IAAA,UA+IE,MAAA,WACM,IADC,EACD,EAAe,GACA,EAAA,EAAA,KAAK,aAFnB,IAEgC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MAC7B,EAAS,KAAK,gBAAgB,GAChC,GAAgB,UAAhB,EAAO,KACT,EAAQ,KAAK,EAAO,WACf,CAAA,GAAoB,YAAhB,EAAO,KAMX,CAAA,GAAoB,SAAhB,EAAO,KAChB,MAEA,SARI,MAAM,QAAQ,EAAO,OACvB,EAAQ,KAAR,MAAA,EAAgB,EAAA,EAAO,QAEvB,EAAQ,KAAK,EAAO,SAVrB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAkBE,OAAA,IAjKX,CAAA,IAAA,OAoKE,MAAA,SAAQ,EAAY,GACd,IADqD,EACrD,EAAc,EACC,EAAA,EAAA,KAAK,aAFiC,IAEpB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MAC7B,EAAS,KAAK,gBAAgB,GAChC,GAAgB,UAAhB,EAAO,KACT,EAAc,EAAQ,EAAO,MAAO,OAC/B,CAAA,GAAoB,YAAhB,EAAO,KASX,CAAA,GAAoB,SAAhB,EAAO,KACT,OAAA,EAEP,SAVE,EADE,MAAM,QAAQ,EAAO,OACT,EAAO,MAAM,OACzB,SAAC,EAAG,GAAQ,OAAA,EAAQ,EAAG,IACvB,GAGY,EAAQ,EAAO,MAAO,KAbe,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAqBlD,OAAA,IAzLX,CAAA,IAAA,UA4LE,MAAA,SAAQ,GACa,IADa,EACb,EAAA,EAAA,KAAK,aADQ,IACK,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MAC7B,EAAS,KAAK,gBAAgB,GAChC,GAAgB,SAAhB,EAAO,KACT,OAEkB,UAAhB,EAAO,MACT,EAAO,EAAO,QAPc,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OA5LpC,CAAA,IAAA,kBAwMU,MAAA,SAAgB,GAClB,IAD0B,EAC1B,EAAM,CAAE,KAAM,QAAS,MAAA,GACH,EAAA,EAAA,KAAK,YAFC,IAEW,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA9B,IAAA,EAA8B,EAAA,MACnC,GAAa,SAAb,EAAI,KACC,OAAA,EAEQ,SAAb,EAAI,OAGR,EAAM,EAAU,KATY,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWvB,OAAA,IAnNX,CAAA,IAAA,WAwNE,MAAA,SAAY,GAAgC,IAAA,EAAA,KASpC,EAAO,KACN,OAAA,IAAI,EAAA,YAAkB,WAlOjC,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,EAmO+B,EAAA,EAAA,GAnO/B,KAAA,EAmOmC,OAnOnC,EAAA,KAAA,EAmOmC,EAAA,EAAA,QAnOnC,KAAA,EAmOmC,IAAA,EAAA,EAAA,MAAA,KAAA,CAnOnC,EAAA,KAAA,GAAA,MAoOQ,OADe,EAAI,EAAA,MAnO3B,EAAA,KAAA,EAoOQ,EAAO,GApOf,KAAA,EAoOQ,OApOR,EAAA,KAAA,GAoOQ,EAAA,KApOR,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,CAAA,MAAA,EAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,QAAA,EAAA,EAAA,QAAA,CAAA,EAAA,KAAA,GAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,CAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,MAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,OAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,UAsOO,KAAK,WAAW,OAbG,SACpB,GACgC,OAAA,EAAA,OAAA,OAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAC5B,GAAe,SAAf,EAAM,KADsB,CAAA,EAAA,KAAA,EAAA,MAEvB,OAAA,EAAA,OAAA,SAAA,GAFuB,KAAA,EAIY,OAAb,EAAA,GAAA,EAJC,EAAA,KAAA,EAIY,EAAM,MAJlB,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,SAAA,CAIvB,KAAM,QAAS,MAJQ,EAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,WA3NtC,CAAA,IAAA,cAyOE,MAAA,SAAY,GACJ,IAAA,EAAO,KAMN,OALW,IAAI,EAAA,YAAkB,WA3O5C,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EA4OyB,EAAA,EAAA,GA5OzB,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MA6OQ,OADS,EAAA,EAAA,MA5OjB,EAAA,KAAA,EA6OQ,EAAM,GA7Od,KAAA,EA6OQ,OA7OR,EAAA,KAAA,EA6OQ,EAAA,KA7OR,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,UA+OO,KAAK,YACS,OAAO,KAhP5B,CAAA,IAAA,YAmPE,MAAA,SAAa,EAAY,GACjB,IAAA,EAAO,KAMN,OALW,IAAI,EAAA,YAAkB,WArP5C,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAsPyB,EAAA,EAAA,GAtPzB,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAuPQ,OADS,EAAA,EAAA,MAtPjB,EAAA,KAAA,EAuPQ,EAAM,GAvPd,KAAA,EAuPQ,OAvPR,EAAA,KAAA,EAuPQ,EAAA,KAvPR,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,UAyPO,KAAK,YACS,KAAQ,EAAS,KA1PtC,CA6PG,IAAA,OAAO,SAAR,MAAA,WACQ,IAAA,EAAO,KACN,OAAC,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACa,EAAA,EAAA,EAAK,aADlB,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,MAGA,GAFK,EADL,EAAA,MAGgB,UADd,EAAS,EAAK,gBAAgB,IACzB,KAHP,CAAA,EAAA,KAAA,EAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,EAMA,GAAgB,UAAhB,EAAO,KANP,CAAA,EAAA,KAAA,GAAA,MAOI,OAPJ,EAAA,KAAA,GAOI,EAAO,MAPX,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,OAAA,OA/PZ,EAAa,GAAb,QAAA,OAAA;;ACmJC,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,GAAA,OAAA,gBAAA,GAAA,KAAA,EAAA,EAAA,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,SAAA,EAAA,EAAA,GAAA,IAAA,OAAA,cAAA,MAAA,IAAA,UAAA,wCAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,eAAA,WAAA,OAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,SAAA,GAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,GAAA,IAAA,iBAAA,EAAA,QAAA,QAAA,EAAA,MAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,MAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,aAAA,QAAA,YAAA,QAAA,MAAA,QAAA,SAAA,QAAA,QAAA,QAAA,OAAA,QAAA,KAAA,QAAA,UAAA,QAAA,QAAA,EA5JD,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,YAEA,SAAgB,EAAM,GACb,OAAA,IAAI,EAAA,OAAa,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAChB,OADgB,EAAA,KAAA,EAChB,EADgB,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAK1B,SAAgB,EAAa,GACpB,OAAA,IAAI,EAAA,OAAa,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACL,EAAA,EAAA,GADK,EAAA,KAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,CAAA,EAAA,KAAA,EAAA,MAEd,OADC,EADa,EAAA,MAAA,EAAA,KAAA,EAEd,EAFc,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,SAO1B,SAAgB,EAAK,GACf,IAAA,EAAM,EACH,OAAA,IAAI,EAAA,OAAuB,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAExB,OAFwB,EAAA,KAAA,EAExB,IAFwB,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAOpC,SAAgB,EAAa,EAAY,GACnC,IAAA,EAAM,EACH,OAAA,IAAI,EAAA,OAAa,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAGhB,QAAW,KADT,EAAS,EAAO,IAFF,CAAA,EAAA,KAAA,EAAA,MAAA,OAAA,EAAA,OAAA,UAAA,KAAA,EAOd,OADN,EAAM,EAAO,GANO,EAAA,KAAA,EAOd,EAAO,GAPO,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAY1B,SAAgB,EAAW,EAAY,GACjC,IAAA,EACG,OAAA,IAAI,EAAA,OAAa,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAEf,GAAA,EAFe,CAAA,EAAA,KAAA,EAAA,MAIZ,OADN,EAAM,EAHY,EAAA,KAAA,EAIZ,EAJY,KAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,EAOZ,OADN,EAAM,EAAO,GANK,EAAA,KAAA,GAOZ,EAPY,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAa1B,SAAgB,EAAS,GACnB,IAAA,EAAQ,EACL,OAAA,IAAI,EAAA,YAA4B,WAmGxC,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAjGK,OAiGL,EAAA,KAAA,EAjGK,EAAM,EAAM,IAiGjB,KAAA,EAhGK,OAgGL,EAAA,KAAA,EAhGK,EAAM,KAgGX,KAAA,EAhGK,OAgGL,EAAA,KAAA,EAhGK,EAAA,KAgGL,KAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QA3FD,SAAgB,EAAM,GACb,OAAA,IAAI,EAAA,YAA4B,WA0FxC,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAzFG,OAyFH,EAAA,KAAA,EAzFG,EAAM,EAAM,IAyFf,KAAA,EAxFG,OAwFH,EAAA,KAAA,EAxFG,EAAM,GAwFT,KAAA,EAxFG,OAwFH,EAAA,KAAA,EAxFG,EAAA,KAwFH,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QApFD,SAAgB,EACd,EACA,GAEI,IAAA,EAAM,EACH,OAAA,IAAI,EAAA,YAAkB,WA+E9B,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EA7EoB,OA6EpB,EAAA,KAAA,EA7EoB,EAAM,EAAO,IA6EjC,KAAA,EA5ES,QAAW,KADT,EAAA,EAAA,MACS,CA4EpB,EAAA,KAAA,EAAA,MA3EO,OA2EP,EAAA,KAAA,EA3EO,OAAA,GA2EP,KAAA,EAAA,OAAA,EAAA,OAAA,SAAA,EAAA,MAAA,KAAA,EAxEK,OADA,EAAM,EAAO,GAyElB,EAAA,KAAA,GAxEK,EAAM,EAAO,IAwElB,KAAA,GAxEK,OAwEL,EAAA,KAAA,GAxEK,EAAA,KAwEL,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QAnED,SAAgB,EAAgB,EAAY,GACtC,IAAA,EACG,OAAA,IAAI,EAAA,YAAkB,WAiE9B,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EA/DU,GAAA,EAAA,CA+DV,EAAA,KAAA,EAAA,MA7DO,OADA,EAAM,EA8Db,EAAA,KAAA,EA7DO,EAAM,GA6Db,KAAA,EA7DO,OA6DP,EAAA,KAAA,EA7DO,EAAA,KA6DP,KAAA,EAAA,EAAA,KAAA,GAAA,MAAA,KAAA,EA3Da,OA2Db,EAAA,KAAA,GA3Da,EAAM,EAAO,IA2D1B,KAAA,GA1DO,OADA,EAAA,EAAA,KA2DP,EAAA,KAAA,GA1DO,EAAM,GA0Db,KAAA,GA1DO,OA0DP,EAAA,KAAA,GA1DO,EAAA,KA0DP,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QA1CD,SAAgB,EAId,EAAW,GACJ,OAAA,IAAI,EAAA,YAAkB,WAqC9B,OAAA,EAAA,KAAA,UAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EApCO,OAA6C,EAC7C,EAAU,IAAI,QAAQ,SAAC,GACzB,EAAW,KAEP,EAAe,WACnB,EAAU,IAAI,QAAQ,SAAC,GACrB,EAAW,QAIT,EAAU,SAAC,GACX,GACF,EAAS,IAGb,EAAO,iBACL,EACA,GAmBL,KAAA,EAfS,IAAA,EAAA,CAeT,EAAA,KAAA,GAAA,MAduB,OAcvB,EAAA,KAAA,GAduB,EAAM,GAc7B,KAAA,GAbO,OADM,EAAA,EAAA,KAcb,EAAA,KAAA,GAbO,EAAM,GAab,KAAA,GAbO,OAaP,EAAA,KAAA,GAbO,EAAA,KAaP,KAAA,GAZO,IAYP,KAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,QAND,SAAS,EAAM,GACN,OAAA,IAAI,QAAQ,SAAC,GAClB,WAAW,WACT,KACC,KAvJP,QAAA,GAAA,EAMA,QAAA,UAAA,EAQA,QAAA,KAAA,EASA,QAAA,OAAA,EAcA,QAAA,QAAA,EAeA,QAAA,SAAA,EAUA,QAAA,MAAA,EAOA,QAAA,YAAA,EAiBA,QAAA,aAAA,EAyBA,QAAA,UAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["import { StreamEntry } from \"./stream\";\nimport { unfoldAsync } from \"./index\";\n\nexport type AsyncStreamEntry<T> = StreamEntry<Promise<T> | T>;\nexport type AsyncStreamResult<T> = { type: \"halt\" } | AsyncStreamEntry<T>;\n\nexport class AsyncStream<T, R> {\n  private generator: () => AsyncGenerator<T, void, void>;\n  private transforms: Function[] = [];\n\n  constructor(\n    generator: () => AsyncGenerator<T, void, void>,\n    transforms: Function[] = []\n  ) {\n    this.generator = generator;\n    this.transforms = transforms;\n  }\n\n  public getGenerator(): AsyncGenerator<T, void, void> {\n    return this.generator();\n  }\n\n  // Transformers\n\n  transform<V, N>(\n    initial: V,\n    transformer: (next: R, accumulator: V) => Promise<[N, V] | undefined>\n  ) {\n    let accumulator = initial;\n    const wrappedMapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<N>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      const ret = await transformer(await entry.value, accumulator);\n      if (!ret) {\n        return { type: \"halt\" };\n      }\n      accumulator = ret[1];\n      return { type: \"value\", value: ret[0] };\n    };\n\n    return new AsyncStream(\n      this.generator,\n      this.transforms.concat(wrappedMapper)\n    );\n  }\n\n  map<V>(mapper: (value: R) => Promise<V>): AsyncStream<T, V> {\n    const wrappedMapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamEntry<V>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"value\", value: mapper(await entry.value) };\n    };\n    return new AsyncStream(\n      this.generator,\n      this.transforms.concat(wrappedMapper)\n    );\n  }\n\n  filter(predicate: (value: R) => Promise<boolean>): AsyncStream<T, T> {\n    const wrappedFilter = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamEntry<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (!(await predicate(await entry.value))) {\n        return { type: \"skip\" };\n      }\n      return entry;\n    };\n    return new AsyncStream(\n      this.generator,\n      this.transforms.concat(wrappedFilter)\n    );\n  }\n\n  flatMap<V>(mapper: (value: R) => Promise<V>) {\n    const wrapped = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamEntry<V>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"flatten\", value: mapper(await entry.value) };\n    };\n    return new AsyncStream<T, V>(\n      this.generator,\n      this.transforms.concat(wrapped)\n    );\n  }\n\n  take(n: number): AsyncStream<T, R> {\n    let count = 0;\n    const wrapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (count === n) {\n        return { type: \"halt\" };\n      }\n      count++;\n      return { type: \"value\", value: entry.value };\n    };\n    return new AsyncStream(this.generator, this.transforms.concat(wrapper));\n  }\n\n  takeUntil(predicate: (value: R) => Promise<boolean>) {\n    const wrapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (await predicate(await entry.value)) {\n        return { type: \"halt\" };\n      }\n      return entry;\n    };\n    return new AsyncStream<T, R>(\n      this.generator,\n      this.transforms.concat(wrapper)\n    );\n  }\n\n  drop(n: number) {\n    let count = 0;\n    const wrapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (entry.type === \"value\" && count < n) {\n        count++;\n        return { type: \"skip\" };\n      }\n      return entry;\n    };\n    return new AsyncStream<T, R>(\n      this.generator,\n      this.transforms.concat(wrapper)\n    );\n  }\n\n  flatten() {\n    const wrapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamEntry<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"flatten\", value: entry.value };\n    };\n    return new AsyncStream<T, R>(\n      this.generator,\n      this.transforms.concat(wrapper)\n    );\n  }\n\n  tap(effect: (value: R) => Promise<void>) {\n    const wrapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<R>> => {\n      if (entry.type === \"value\") {\n        effect(await entry.value);\n      }\n      return entry;\n    };\n    return new AsyncStream<T, R>(\n      this.generator,\n      this.transforms.concat(wrapper)\n    );\n  }\n\n  concat<T1, R1>(other: AsyncStream<T1, R1>): AsyncStream<R | R1, R | R1> {\n    const self = this;\n    return new AsyncStream<R | R1, R | R1>(async function* () {\n      for await (const one of self) {\n        yield one;\n      }\n      for await (const two of other) {\n        yield two;\n      }\n    });\n  }\n\n  withIndex(): AsyncStream<T, [R, number]> {\n    let index = 0;\n    const wrappedMapper = async (\n      entry: AsyncStreamEntry<R>\n    ): Promise<AsyncStreamResult<[R, number]>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"value\", value: [await entry.value, index++] };\n    };\n    return new AsyncStream(\n      this.generator,\n      this.transforms.concat(wrappedMapper)\n    );\n  }\n\n  combine<T1, R1>(a: AsyncStream<T1, R1>): AsyncStream<T | T1, R | R1>;\n  combine<T1, R1, T2, R2>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>\n  ): AsyncStream<T | T1 | T2, R | R1 | R2>;\n  combine<T1, R1, T2, R2, T3, R3>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>\n  ): AsyncStream<T | T1 | T2 | T3, R | R1 | R2 | R3>;\n  combine<T1, R1, T2, R2, T3, R3, T4, R4>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>\n  ): AsyncStream<T | T1 | T2 | T3 | T4, R | R1 | R2 | R3 | R4>;\n  combine<T1, R1, T2, R2, T3, R3, T4, R4, T5, R5>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>\n  ): AsyncStream<T | T1 | T2 | T3 | T4 | T5, R | R1 | R2 | R3 | R4 | R5>;\n  combine<T1, R1, T2, R2, T3, R3, T4, R4, T5, R5, T6, R6>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>,\n    f: AsyncStream<T6, R6>\n  ): AsyncStream<\n    T | T1 | T2 | T3 | T4 | T5 | T6,\n    R | R1 | R2 | R3 | R4 | R5 | R6\n  >;\n  combine<T1, R1, T2, R2, T3, R3, T4, R4, T5, R5, T6, R6, T7, R7>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>,\n    f: AsyncStream<T6, R6>,\n    g: AsyncStream<T7, R7>\n  ): AsyncStream<\n    T | T1 | T2 | T3 | T4 | T5 | T6 | T7,\n    R | R1 | R2 | R3 | R4 | R5 | R6 | R7\n  >;\n  combine<T1, R1, T2, R2, T3, R3, T4, R4, T5, R5, T6, R6, T7, R7, T8, R8>(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>,\n    f: AsyncStream<T6, R6>,\n    g: AsyncStream<T7, R7>,\n    h: AsyncStream<T8, R8>\n  ): AsyncStream<\n    T | T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8,\n    R | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8\n  >;\n  combine<\n    T1,\n    R1,\n    T2,\n    R2,\n    T3,\n    R3,\n    T4,\n    R4,\n    T5,\n    R5,\n    T6,\n    R6,\n    T7,\n    R7,\n    T8,\n    R8,\n    T9,\n    R9\n  >(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>,\n    f: AsyncStream<T6, R6>,\n    g: AsyncStream<T7, R7>,\n    h: AsyncStream<T8, R8>,\n    i: AsyncStream<T9, R9>\n  ): AsyncStream<\n    T | T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9,\n    R | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9\n  >;\n  combine<\n    T1,\n    R1,\n    T2,\n    R2,\n    T3,\n    R3,\n    T4,\n    R4,\n    T5,\n    R5,\n    T6,\n    R6,\n    T7,\n    R7,\n    T8,\n    R8,\n    T9,\n    R9,\n    T10,\n    R10\n  >(\n    a: AsyncStream<T1, R1>,\n    b: AsyncStream<T2, R2>,\n    c: AsyncStream<T3, R3>,\n    d: AsyncStream<T4, R4>,\n    e: AsyncStream<T5, R5>,\n    f: AsyncStream<T6, R6>,\n    g: AsyncStream<T7, R7>,\n    h: AsyncStream<T8, R8>,\n    i: AsyncStream<T9, R9>,\n    j: AsyncStream<T10, R10>\n  ): AsyncStream<\n    T | T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10,\n    R | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10\n  >;\n\n  combine(...others: AsyncStream<any, any>[]) {\n    const generators = [\n      this[Symbol.asyncIterator](),\n      ...others.map((gen) => gen[Symbol.asyncIterator]()),\n    ];\n\n    const promises = generators.map(async (generator, index) => {\n      const res = await generator.next();\n      return {\n        index,\n        generator: index,\n        retVal: res,\n      };\n    });\n\n    type QueueEntry = {\n      index: number;\n      generator: number;\n      retVal: IteratorResult<R>;\n    };\n\n    type Accumulator = {\n      generators: AsyncGenerator<any>[];\n      queue: { [index: number]: Promise<QueueEntry> };\n    };\n\n    const accumulator: Accumulator = {\n      generators,\n      queue: promises.reduce(\n        (acc, next, index) => ({\n          ...acc,\n          [index]: next,\n        }),\n        {}\n      ),\n    };\n\n    return unfoldAsync(accumulator, async ({ generators, queue }) => {\n      if (generators.length === 0 && Object.keys(queue).length === 0) {\n        return;\n      }\n\n      let result = await Promise.race(Object.values(queue));\n      delete queue[result.index];\n\n      if (result.retVal.done) {\n        generators.splice(result.generator, 1);\n        if (generators.length === 0 && Object.keys(queue).length === 0) {\n          return;\n        }\n        result = await Promise.race(Object.values(queue));\n        delete queue[result.index];\n        if (result.retVal.done) {\n          return;\n        }\n      }\n\n      const nextIndex =\n        Math.max(...Object.keys(queue).map((n) => parseInt(n))) + 1;\n      const next = generators[result.generator].next().then((res) => {\n        return {\n          index: nextIndex,\n          generator: result.generator,\n          retVal: res,\n        };\n      });\n      queue[nextIndex] = next;\n\n      return [result.retVal.value, { generators, queue }];\n    });\n  }\n\n  // Consumers\n\n  async toArray(): Promise<R[]> {\n    let results: R[] = [];\n    for await (const elem of this.generator()) {\n      const result = await this.applyTransforms(elem);\n      if (result.type === \"value\") {\n        results.push(await result.value);\n      } else if (result.type === \"flatten\") {\n        if (Array.isArray(result.value)) {\n          results.push(...(await Promise.all(result.value)));\n        } else {\n          results.push(await result.value);\n        }\n      } else if (result.type === \"halt\") {\n        break;\n      } else {\n        continue;\n      }\n    }\n    return results;\n  }\n\n  async fold<V>(initial: V, reducer: (next: R, accumulator: V) => Promise<V>) {\n    let accumulator = initial;\n    for await (const elem of this.generator()) {\n      const result = await this.applyTransforms(elem);\n      if (result.type === \"value\") {\n        accumulator = await reducer(await result.value, accumulator);\n      } else if (result.type === \"flatten\") {\n        if (Array.isArray(result.value)) {\n          accumulator = result.value.reduce(\n            (v, acc) => reducer(v, acc),\n            accumulator\n          );\n        } else {\n          accumulator = await reducer(await result.value, accumulator);\n        }\n      } else if (result.type === \"halt\") {\n        return accumulator;\n      } else {\n        continue;\n      }\n    }\n    return accumulator;\n  }\n\n  async forEach(effect: (value: R) => void) {\n    for await (const elem of this.generator()) {\n      const result = await this.applyTransforms(elem);\n      if (result.type === \"halt\") {\n        return;\n      }\n      if (result.type === \"value\") {\n        effect(await result.value);\n      }\n    }\n  }\n\n  private async applyTransforms(value: T): Promise<AsyncStreamResult<R>> {\n    let acc = { type: \"value\", value };\n    for (const transform of this.transforms) {\n      if (acc.type === \"halt\") {\n        return acc as AsyncStreamResult<R>;\n      }\n      if (acc.type === \"skip\") {\n        continue;\n      }\n      acc = await transform(acc);\n    }\n    return acc as AsyncStreamResult<R>;\n  }\n\n  [Symbol.asyncIterator]() {\n    const self = this;\n    return (async function* () {\n      for await (const elem of self.generator()) {\n        const result = await self.applyTransforms(elem);\n        if (result.type === \"halt\") {\n          return;\n        }\n        if (result.type === \"value\") {\n          yield result.value;\n        }\n      }\n    })();\n  }\n}\n","import { AsyncStream, AsyncStreamEntry } from \"./asyncStream\";\n\nexport type StreamEntry<T> =\n  | { type: \"skip\" }\n  | { type: \"value\"; value: T }\n  | { type: \"flatten\"; value: T };\n\nexport type StreamResult<T> = StreamEntry<T> | { type: \"halt\" };\n\nexport class Stream<T, R> {\n  private generator: () => Generator<T, void, void>;\n  private transforms: Function[] = [];\n\n  constructor(\n    generator: () => Generator<T, void, void>,\n    transforms: Function[] = []\n  ) {\n    this.generator = generator;\n    this.transforms = transforms;\n  }\n\n  // Transformers\n\n  transform<V, M>(\n    initial: V,\n    transformer: (value: T, accumulator: V) => [M, V] | undefined\n  ) {\n    let accumulator = initial;\n    const wrappedMapper = (entry: StreamEntry<T>): StreamResult<M> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      const next = transformer(entry.value, accumulator);\n      if (!next) {\n        return { type: \"halt\" };\n      }\n      accumulator = next[1];\n      return { type: \"value\", value: next[0] };\n    };\n    return new Stream(this.generator, this.transforms.concat(wrappedMapper));\n  }\n\n  map<V>(mapper: (value: T) => V): Stream<T, V> {\n    const wrappedMapper = (entry: StreamEntry<T>): StreamEntry<V> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"value\", value: mapper(entry.value) };\n    };\n    return new Stream(this.generator, this.transforms.concat(wrappedMapper));\n  }\n\n  filter(predicate: (value: T) => boolean): Stream<T, R> {\n    const wrappedFilter = (entry: StreamEntry<T>): StreamEntry<T> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (!predicate(entry.value)) {\n        return { type: \"skip\" };\n      }\n      return entry;\n    };\n    return new Stream(this.generator, this.transforms.concat(wrappedFilter));\n  }\n\n  flatMap<V>(mapper: (value: T) => V) {\n    const wrapped = (entry: StreamEntry<T>): StreamEntry<V> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"flatten\", value: mapper(entry.value) };\n    };\n    return new Stream<T, V>(this.generator, this.transforms.concat(wrapped));\n  }\n\n  take(n: number): Stream<T, R> {\n    let count = 0;\n    const wrapper = (entry: StreamEntry<T>) => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (count === n) {\n        return { type: \"halt\" };\n      }\n      count++;\n      return { type: \"value\", value: entry.value };\n    };\n    return new Stream(this.generator, this.transforms.concat(wrapper));\n  }\n\n  takeUntil(predicate: (value: T) => boolean) {\n    const wrapper = (entry: StreamEntry<T>) => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (predicate(entry.value)) {\n        return { type: \"halt\" };\n      }\n      return entry;\n    };\n    return new Stream<T, T>(this.generator, this.transforms.concat(wrapper));\n  }\n\n  drop(n: number) {\n    let count = 0;\n    const wrapper = (entry: StreamEntry<T>) => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      if (entry.type === \"value\" && count < n) {\n        count++;\n        return { type: \"skip\" };\n      }\n      return entry;\n    };\n    return new Stream<T, T>(this.generator, this.transforms.concat(wrapper));\n  }\n\n  flatten() {\n    const wrapper = (entry: StreamEntry<T>): StreamEntry<T> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"flatten\", value: entry.value };\n    };\n    return new Stream<T, R>(this.generator, this.transforms.concat(wrapper));\n  }\n\n  tap(effect: (value: T) => void) {\n    const wrapper = (entry: StreamEntry<T>): StreamEntry<T> => {\n      if (entry.type === \"value\") {\n        effect(entry.value);\n      }\n      return entry;\n    };\n    return new Stream<T, T>(this.generator, this.transforms.concat(wrapper));\n  }\n\n  concat<V>(other: Stream<V, V>): Stream<R | V, R | V> {\n    const self = this;\n    return new Stream<R | V, R | V>(function* () {\n      for (const one of self) {\n        yield one;\n      }\n      for (const two of other) {\n        yield two;\n      }\n    });\n  }\n\n  // Consumers\n\n  toArray(): R[] {\n    let results: R[] = [];\n    for (const elem of this.generator()) {\n      const result = this.applyTransforms(elem);\n      if (result.type === \"value\") {\n        results.push(result.value);\n      } else if (result.type === \"flatten\") {\n        if (Array.isArray(result.value)) {\n          results.push(...result.value);\n        } else {\n          results.push(result.value);\n        }\n      } else if (result.type === \"halt\") {\n        break;\n      } else {\n        continue;\n      }\n    }\n    return results;\n  }\n\n  fold<V>(initial: V, reducer: (next: R, accumulator: V) => V) {\n    let accumulator = initial;\n    for (const elem of this.generator()) {\n      const result = this.applyTransforms(elem);\n      if (result.type === \"value\") {\n        accumulator = reducer(result.value, accumulator);\n      } else if (result.type === \"flatten\") {\n        if (Array.isArray(result.value)) {\n          accumulator = result.value.reduce(\n            (v, acc) => reducer(v, acc),\n            accumulator\n          );\n        } else {\n          accumulator = reducer(result.value, accumulator);\n        }\n      } else if (result.type === \"halt\") {\n        return accumulator;\n      } else {\n        continue;\n      }\n    }\n    return accumulator;\n  }\n\n  forEach(effect: (value: R) => void) {\n    for (const elem of this.generator()) {\n      const result = this.applyTransforms(elem);\n      if (result.type === \"halt\") {\n        return;\n      }\n      if (result.type === \"value\") {\n        effect(result.value);\n      }\n    }\n  }\n\n  private applyTransforms(value: T): StreamResult<R> {\n    let acc = { type: \"value\", value };\n    for (const transform of this.transforms) {\n      if (acc.type === \"halt\") {\n        return acc as StreamEntry<R>;\n      }\n      if (acc.type === \"skip\") {\n        continue;\n      }\n      acc = transform(acc);\n    }\n    return acc as StreamEntry<R>;\n  }\n\n  // Lift to async\n\n  mapAsync<R>(mapper: (value: T) => Promise<R>) {\n    const wrappedMapper = async (\n      entry: AsyncStreamEntry<T>\n    ): Promise<AsyncStreamEntry<R>> => {\n      if (entry.type === \"skip\") {\n        return entry;\n      }\n      return { type: \"value\", value: mapper(await entry.value) };\n    };\n    const self = this;\n    return new AsyncStream<T, R>(async function* () {\n      for await (const elem of self) {\n        yield (elem as unknown) as T;\n      }\n    }, this.transforms.concat(wrappedMapper));\n  }\n\n  filterAsync(predicate: (value: R) => Promise<boolean>) {\n    const self = this;\n    const newStream = new AsyncStream<R, R>(async function* () {\n      for (const elem of self) {\n        yield elem;\n      }\n    }, this.transforms);\n    return newStream.filter(predicate);\n  }\n\n  foldAsync<V>(initial: V, reducer: (next: R, acc: V) => Promise<V>) {\n    const self = this;\n    const newStream = new AsyncStream<R, R>(async function* () {\n      for (const elem of self) {\n        yield elem;\n      }\n    }, this.transforms);\n    return newStream.fold<V>(initial, reducer);\n  }\n\n  [Symbol.iterator]() {\n    const self = this;\n    return (function* () {\n      for (const elem of self.generator()) {\n        const result = self.applyTransforms(elem);\n        if (result.type === \"halt\") {\n          return;\n        }\n        if (result.type === \"value\") {\n          yield result.value;\n        }\n      }\n    })();\n  }\n}\n","import { AsyncStream } from \"./asyncStream\";\nimport { Stream } from \"./stream\";\n\nexport function of<T>(elem: T) {\n  return new Stream<T, T>(function* () {\n    yield elem;\n  });\n}\n\nexport function fromArray<T>(elems: T[]) {\n  return new Stream<T, T>(function* () {\n    for (let elem of elems) {\n      yield elem;\n    }\n  });\n}\n\nexport function from(n: number) {\n  let num = n;\n  return new Stream<number, number>(function* () {\n    while (true) {\n      yield num++;\n    }\n  });\n}\n\nexport function unfold<T, R>(initial: R, mapper: (v: R) => [T, R] | undefined) {\n  let acc = initial;\n  return new Stream<T, R>(function* () {\n    while (true) {\n      const mapped = mapper(acc);\n      if (mapped === undefined) {\n        return;\n      }\n      acc = mapped[1];\n      yield mapped[0];\n    }\n  });\n}\n\nexport function iterate<T>(initial: T, mapper: (v: T) => T) {\n  let acc: T;\n  return new Stream<T, T>(function* () {\n    while (true) {\n      if (!acc) {\n        acc = initial;\n        yield initial;\n      } else {\n        acc = mapper(acc);\n        yield acc;\n      }\n    }\n  });\n}\n\nexport function interval(n: number) {\n  let count = 0;\n  return new AsyncStream<number, number>(async function* () {\n    while (true) {\n      await delay(n);\n      yield count++;\n    }\n  });\n}\n\nexport function timer(n: number) {\n  return new AsyncStream<number, number>(async function* () {\n    await delay(n);\n    yield 0;\n  });\n}\n\nexport function unfoldAsync<T, R>(\n  initial: R,\n  mapper: (v: R) => Promise<[T, R] | undefined>\n) {\n  let acc = initial;\n  return new AsyncStream<T, T>(async function* () {\n    while (true) {\n      const mapped = await mapper(acc);\n      if (mapped === undefined) {\n        return;\n      }\n      acc = mapped[1];\n      yield mapped[0];\n    }\n  });\n}\n\nexport function iterateAsync<T>(initial: T, mapper: (v: T) => Promise<T>) {\n  let acc: T;\n  return new AsyncStream<T, T>(async function* () {\n    while (true) {\n      if (!acc) {\n        acc = initial;\n        yield initial;\n      } else {\n        acc = await mapper(acc);\n        yield acc;\n      }\n    }\n  });\n}\n\ntype EventMap<T> = T extends EventTarget\n  ? T extends WebSocket\n    ? WebSocketEventMap\n    : T extends HTMLElement\n    ? HTMLElementEventMap\n    : T extends Element\n    ? ElementEventMap\n    : never\n  : never;\n\nexport function fromEvent<\n  B extends EventTarget,\n  T extends keyof EventMap<B> & string,\n  E extends EventMap<B>[T]\n>(target: B, type: T): AsyncStream<E, E> {\n  return new AsyncStream<E, E>(async function* () {\n    let resolver: ((event: E) => void) | undefined = undefined;\n    let promise = new Promise((resolve) => {\n      resolver = resolve;\n    });\n    const setupPromise = () => {\n      promise = new Promise((resolve) => {\n        resolver = resolve;\n      });\n    };\n    setupPromise();\n    const handler = (event: E) => {\n      if (resolver) {\n        resolver(event);\n      }\n    };\n    target.addEventListener(\n      type,\n      handler as EventListenerOrEventListenerObject\n    );\n\n    while (true) {\n      if (promise) {\n        const event = ((await promise) as unknown) as E;\n        yield event;\n        setupPromise();\n      }\n    }\n  });\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n}\n"]}